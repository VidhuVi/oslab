#include <stdio.h>

void bestFit(int blocks[], int blockCount, int processes[], int processCount) {
    int allocation[processCount]; // Stores allocated block index for each process

    // Initialize allocation array with -1 (indicating no allocation)
    for (int i = 0; i < processCount; i++) {
        allocation[i] = -1;
    }

    // Best Fit Allocation
    for (int i = 0; i < processCount; i++) {
        int bestIndex = -1; // Store index of the best block found

        for (int j = 0; j < blockCount; j++) {
            if (blocks[j] >= processes[i]) { // If block can fit the process
                if (bestIndex == -1 || blocks[j] < blocks[bestIndex]) {
                    bestIndex = j; // Update best block index
                }
            }
        }

        // Allocate process if a suitable block was found
        if (bestIndex != -1) {
            allocation[i] = bestIndex;  // Assign best block to process
            blocks[bestIndex] -= processes[i]; // Reduce block size after allocation
        }
    }

    // Display allocation results
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processCount; i++) {
        if (allocation[i] != -1)
            printf("%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1);
        else
            printf("%d\t\t%d\t\tNot Allocated\n", i + 1, processes[i]);
    }
}

int main() {
    int blockCount, processCount;

    // Input memory blocks
    printf("Enter number of memory blocks: ");
    scanf("%d", &blockCount);
    int blocks[blockCount];

    printf("Enter sizes of memory blocks: ");
    for (int i = 0; i < blockCount; i++) {
        scanf("%d", &blocks[i]);
    }

    // Input processes
    printf("\nEnter number of processes: ");
    scanf("%d", &processCount);
    int processes[processCount];

    printf("Enter sizes of processes: ");
    for (int i = 0; i < processCount; i++) {
        scanf("%d", &processes[i]);
    }

    // Perform Best Fit Allocation
    bestFit(blocks, blockCount, processes, processCount);

    return 0;
}
