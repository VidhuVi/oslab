#include <stdio.h>

// Structure to represent a process
struct Process {
    int pid;         // Process ID
    int arrival;     // Arrival time
    int burst;       // Burst time
    int waiting;     // Waiting time
    int turnaround;  // Turnaround time
};

// Function to sort processes by arrival time
void sortByArrival(struct Process p[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (p[j].arrival > p[j + 1].arrival) {
                struct Process temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
        }
    }
}

// Function to calculate waiting and turnaround time
void calculateTimes(struct Process p[], int n) {
    int completionTime = 0; // Tracks when the CPU finishes a process

    for (int i = 0; i < n; i++) {
        // If CPU is idle, start the process when it arrives
        if (completionTime < p[i].arrival)
            completionTime = p[i].arrival;

        // Completion time of current process
        completionTime += p[i].burst;

        // Turnaround Time = Completion Time - Arrival Time
        p[i].turnaround = completionTime - p[i].arrival;

        // Waiting Time = Turnaround Time - Burst Time
        p[i].waiting = p[i].turnaround - p[i].burst;
    }
}

// Function to display process details
void displayProcesses(struct Process p[], int n) {
    printf("\nPID\tArrival\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].arrival, p[i].burst, p[i].waiting, p[i].turnaround);
    }
}

// Function to display Gantt Chart
void displayGanttChart(struct Process p[], int n) {
    printf("\nGantt Chart:\n ");
    for (int i = 0; i < n; i++)
        printf("--------");
    printf("\n|");

    for (int i = 0; i < n; i++)
        printf(" P%d |", p[i].pid);

    printf("\n ");
    for (int i = 0; i < n; i++)
        printf("--------");

    printf("\n0");

    int completionTime = 0;
    for (int i = 0; i < n; i++) {
        if (completionTime < p[i].arrival)
            completionTime = p[i].arrival;
        completionTime += p[i].burst;
        printf("   %d", completionTime);
    }
    printf("\n");
}

// Main function
int main() {
    int n;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("\nEnter Arrival Time and Burst Time for Process %d: ", i + 1);
        p[i].pid = i + 1;
        scanf("%d %d", &p[i].arrival, &p[i].burst);
    }

    // Sort processes by arrival time
    sortByArrival(p, n);

    // Calculate waiting and turnaround time
    calculateTimes(p, n);

    // Display results
    displayProcesses(p, n);

    // Display Gantt chart
    displayGanttChart(p, n);

    return 0;
}