#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5 // Buffer size
int buffer[BUFFER_SIZE]; // Shared buffer
int in = 0, out = 0; // Pointers for insertion and removal

pthread_mutex_t mutex; // Mutex for critical section
sem_t full, empty; // Semaphores to track buffer state

// Producer function
void* producer(void* arg) {
    int item;
    for (int i = 1; i <= 10; i++) { // Producing 10 items
        item = i; // Produce an item

        sem_wait(&empty); // Wait if buffer is full
        pthread_mutex_lock(&mutex); // Lock critical section

        buffer[in] = item;
        printf("Producer produced: %d\n", item);
        in = (in + 1) % BUFFER_SIZE; // Move pointer circularly

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&full); // Signal that buffer has an item

        sleep(1); // Simulate production delay
    }
    return NULL;
}

// Consumer function
void* consumer(void* arg) {
    int item;
    for (int i = 1; i <= 10; i++) { // Consuming 10 items
        sem_wait(&full); // Wait if buffer is empty
        pthread_mutex_lock(&mutex); // Lock critical section

        item = buffer[out];
        printf("Consumer consumed: %d\n", item);
        out = (out + 1) % BUFFER_SIZE; // Move pointer circularly

        pthread_mutex_unlock(&mutex); // Unlock critical section
        sem_post(&empty); // Signal that buffer has space

        sleep(2); // Simulate consumption delay
    }
    return NULL;
}

int main() {
    pthread_t prodThread, consThread;

    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE); // Buffer starts empty
    sem_init(&full, 0, 0); // No items initially

    pthread_mutex_init(&mutex, NULL); // Initialize mutex

    // Create producer and consumer threads
    pthread_create(&prodThread, NULL, producer, NULL);
    pthread_create(&consThread, NULL, consumer, NULL);

    // Wait for threads to finish
    pthread_join(prodThread, NULL);
    pthread_join(consThread, NULL);

    // Cleanup
    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);

    return 0;
}
